;;; init-org.el --- Configuration for Org mode

;;; Commentary:
;;; Code:

(setq org-CUA-compatible t)
(require 'org)
(setq org-link-descriptive nil)
(setq org-support-shift-select t)
(setq org-confirm-babel-evaluate nil)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t))) ; this line activates dot
(setq org-export-allow-bind-keywords t)

(require 'ox-beamer)
(defun org-beamer-export-to-pdf-async ()
  "Export current Org buffer to PDF asynchronously using Beamer."
  (interactive)
  (org-beamer-export-to-pdf t))

(defun org-latex-export-to-pdf-async ()
  "Export current Org buffer to PDF asynchronously using LaTeX."
  (interactive)
  (org-latex-export-to-pdf t))

(require 'ox-publish)
;; To publish a project using org-mode, org-publish-project-alist need to be set.
;; Here's an example using .dir-locals.el to setup org-mode publish in a projectile project
;; without hardcoded absolute path.
;;
;; ((org-mode
;;   .
;;   ((eval .
;;          (setq-local
;;           org-publish-project-alist
;;           `(
;;             ("doc" :components ("doc-org" "doc-static"))
;;             ("doc-org"
;;              ;; Path to org files.
;;              :base-directory ,(expand-file-name "org" (projectile-project-root))
;;              :base-extension "org"
;;              ;; Path to Jekyll Posts
;;              :publishing-directory ,(projectile-project-root)
;;              :recursive t
;;              :publishing-function org-html-publish-to-html
;;              :headline-levels 4
;;              :html-extension "html"
;;              :body-only t
;;              )
;;             ("doc-static"
;;              :base-directory ,(expand-file-name "org" (projectile-project-root))
;;              :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
;;              :publishing-directory ,(projectile-project-root)
;;              :recursive t
;;              :publishing-function org-publish-attachment)
;;             )
;;           )))))

(setq org-auto-publish nil)
(defun toggle-org-auto-publish ()
  "Toggle auto publish for Org mode documents."
  (interactive)
  (setq-local org-auto-publish (if org-auto-publish nil t))
  (message "%s auto publish orgmode document" (if org-auto-publish "Enabled" "Disabled")))

(add-hook 'find-file-hook
          (lambda()
            (if (org-publish-get-project-from-filename (buffer-file-name))
                (add-hook 'after-save-hook
                          (lambda ()
                            (when org-auto-publish (org-publish-current-project))) t t))))

(require 'ox-html)
(setq org-html-prefer-user-labels t)
(defun org-html-body-remove-id (output)
  "Remove random ID attributes generated by Org."
  (replace-regexp-in-string
   " id=\"[[:alpha:]-]*org[[:alnum:]]\\{7\\}\""
   ""
   output t))

;; TODO(fangzhen) This may break references
(advice-add 'org-html-special-block :filter-return #'org-html-body-remove-id)
(advice-add 'org-html-paragraph :filter-return #'org-html-body-remove-id)

;; Add Jekyll front matter to published HTML by setting `':publishing-function`
;; to `org-html-publish-with-jekyll-front-matter`
(org-export-define-derived-backend 'jekyll-html 'html
  :options-alist
  '((:jekyll-layout "JEKYLL_LAYOUT" nil nil t)
    (:jekyll-tags "JEKYLL_TAGS" nil nil t)
    ))

(defun org-html-publish-with-jekyll-front-matter (plist filename pub-dir)
  "Publish Org file to HTML with Jekyll front matter."
  (let* ((export-options (org-export-get-environment 'jekyll-html))
         (layout (or (plist-get export-options :jekyll-layout) "post"))
         (title (or (mapconcat 'identity (plist-get export-options :title) " ") "Untitled"))
         (subtitle (or (mapconcat 'identity (plist-get export-options :subtitle) " ") ""))
         (date (or (plist-get export-options :date) "1970-01-01"))
         (tags (or (plist-get export-options :jekyll-tags) ""))
         (exported-file (org-html-publish-to-html plist filename pub-dir)))
    (with-temp-buffer
      (insert-file-contents exported-file)
      ;; Insert Jekyll Front Matter
      (goto-char (point-min))
      (insert "---\n")
      (insert (format "title: \"%s\"\n" (if subtitle (concat title ": " subtitle) title)))
      (insert (format "date: %s\n" date))
      (insert (format "layout: %s\n" layout))
      (insert "---\n\n")
      (write-region (point-min) (point-max) exported-file))))

(provide 'init-org)
;;; init-org.el ends here
